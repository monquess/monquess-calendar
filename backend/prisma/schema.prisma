generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int              @id @default(autoincrement())
  username            String           @unique @db.VarChar(255)
  email               String           @unique @db.VarChar(255)
  password            String           @db.VarChar(60)
  verified            Boolean          @default(false)
  avatar              String
  calendarMemberships CalendarMember[]

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  EventMember EventMember[]

  @@map("users")
}

model Calendar {
  id          Int              @id @default(autoincrement())
  isPersonal  Boolean          @default(false) @map("is_personal")
  name        String           @db.VarChar(255)
  description String?
  color       String           @db.VarChar(7)
  users       CalendarMember[]
  events      Event[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("calendars")
}

model CalendarMember {
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int              @map("user_id")
  calendar   Calendar         @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId Int              @map("calendar_id")
  role       Role             @default(VIEWER)
  status     InvitationStatus

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, calendarId])
  @@map("calendar_members")
}

model Event {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(30)
  description String?       @db.VarChar(255)
  color       String        @db.VarChar(7)
  calendarId  Int
  calendar    Calendar      @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  type        EventType
  startDate   DateTime      @db.Timestamptz()
  endDate     DateTime?     @db.Timestamptz()
  members     EventMember[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("events")
}

model EventMember {
  eventId Int
  event   Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  Int
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  status  InvitationStatus
  role    Role             @default(VIEWER)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([eventId, userId])
  @@map("event_members")
}

enum Role {
  VIEWER
  EDITOR
  OWNER
}

enum InvitationStatus {
  INVITED
  ACCEPTED
  DECLINED
}

enum EventType {
  MEETING
  REMINDER
  TASK
}
